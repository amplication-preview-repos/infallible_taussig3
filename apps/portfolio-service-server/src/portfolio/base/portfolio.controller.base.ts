/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PortfolioService } from "../portfolio.service";
import { PortfolioCreateInput } from "./PortfolioCreateInput";
import { Portfolio } from "./Portfolio";
import { PortfolioFindManyArgs } from "./PortfolioFindManyArgs";
import { PortfolioWhereUniqueInput } from "./PortfolioWhereUniqueInput";
import { PortfolioUpdateInput } from "./PortfolioUpdateInput";
import { ProjectFindManyArgs } from "../../project/base/ProjectFindManyArgs";
import { Project } from "../../project/base/Project";
import { ProjectWhereUniqueInput } from "../../project/base/ProjectWhereUniqueInput";
import { SkillFindManyArgs } from "../../skill/base/SkillFindManyArgs";
import { Skill } from "../../skill/base/Skill";
import { SkillWhereUniqueInput } from "../../skill/base/SkillWhereUniqueInput";
import { TestimonialFindManyArgs } from "../../testimonial/base/TestimonialFindManyArgs";
import { Testimonial } from "../../testimonial/base/Testimonial";
import { TestimonialWhereUniqueInput } from "../../testimonial/base/TestimonialWhereUniqueInput";

export class PortfolioControllerBase {
  constructor(protected readonly service: PortfolioService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Portfolio })
  async createPortfolio(
    @common.Body() data: PortfolioCreateInput
  ): Promise<Portfolio> {
    return await this.service.createPortfolio({
      data: data,
      select: {
        contactEmail: true,
        createdAt: true,
        id: true,
        introduction: true,
        ownerName: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Portfolio] })
  @ApiNestedQuery(PortfolioFindManyArgs)
  async portfolios(@common.Req() request: Request): Promise<Portfolio[]> {
    const args = plainToClass(PortfolioFindManyArgs, request.query);
    return this.service.portfolios({
      ...args,
      select: {
        contactEmail: true,
        createdAt: true,
        id: true,
        introduction: true,
        ownerName: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Portfolio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async portfolio(
    @common.Param() params: PortfolioWhereUniqueInput
  ): Promise<Portfolio | null> {
    const result = await this.service.portfolio({
      where: params,
      select: {
        contactEmail: true,
        createdAt: true,
        id: true,
        introduction: true,
        ownerName: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Portfolio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePortfolio(
    @common.Param() params: PortfolioWhereUniqueInput,
    @common.Body() data: PortfolioUpdateInput
  ): Promise<Portfolio | null> {
    try {
      return await this.service.updatePortfolio({
        where: params,
        data: data,
        select: {
          contactEmail: true,
          createdAt: true,
          id: true,
          introduction: true,
          ownerName: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Portfolio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePortfolio(
    @common.Param() params: PortfolioWhereUniqueInput
  ): Promise<Portfolio | null> {
    try {
      return await this.service.deletePortfolio({
        where: params,
        select: {
          contactEmail: true,
          createdAt: true,
          id: true,
          introduction: true,
          ownerName: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/projects")
  @ApiNestedQuery(ProjectFindManyArgs)
  async findProjects(
    @common.Req() request: Request,
    @common.Param() params: PortfolioWhereUniqueInput
  ): Promise<Project[]> {
    const query = plainToClass(ProjectFindManyArgs, request.query);
    const results = await this.service.findProjects(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,

        portfolio: {
          select: {
            id: true,
          },
        },

        projectName: true,
        technologiesUsed: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/projects")
  async connectProjects(
    @common.Param() params: PortfolioWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        connect: body,
      },
    };
    await this.service.updatePortfolio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/projects")
  async updateProjects(
    @common.Param() params: PortfolioWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        set: body,
      },
    };
    await this.service.updatePortfolio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/projects")
  async disconnectProjects(
    @common.Param() params: PortfolioWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        disconnect: body,
      },
    };
    await this.service.updatePortfolio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/skills")
  @ApiNestedQuery(SkillFindManyArgs)
  async findSkills(
    @common.Req() request: Request,
    @common.Param() params: PortfolioWhereUniqueInput
  ): Promise<Skill[]> {
    const query = plainToClass(SkillFindManyArgs, request.query);
    const results = await this.service.findSkills(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        portfolio: {
          select: {
            id: true,
          },
        },

        proficiencyLevel: true,
        skillName: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/skills")
  async connectSkills(
    @common.Param() params: PortfolioWhereUniqueInput,
    @common.Body() body: SkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      skills: {
        connect: body,
      },
    };
    await this.service.updatePortfolio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/skills")
  async updateSkills(
    @common.Param() params: PortfolioWhereUniqueInput,
    @common.Body() body: SkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      skills: {
        set: body,
      },
    };
    await this.service.updatePortfolio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/skills")
  async disconnectSkills(
    @common.Param() params: PortfolioWhereUniqueInput,
    @common.Body() body: SkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      skills: {
        disconnect: body,
      },
    };
    await this.service.updatePortfolio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/testimonials")
  @ApiNestedQuery(TestimonialFindManyArgs)
  async findTestimonials(
    @common.Req() request: Request,
    @common.Param() params: PortfolioWhereUniqueInput
  ): Promise<Testimonial[]> {
    const query = plainToClass(TestimonialFindManyArgs, request.query);
    const results = await this.service.findTestimonials(params.id, {
      ...query,
      select: {
        clientName: true,
        createdAt: true,
        feedback: true,
        id: true,

        portfolio: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/testimonials")
  async connectTestimonials(
    @common.Param() params: PortfolioWhereUniqueInput,
    @common.Body() body: TestimonialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      testimonials: {
        connect: body,
      },
    };
    await this.service.updatePortfolio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/testimonials")
  async updateTestimonials(
    @common.Param() params: PortfolioWhereUniqueInput,
    @common.Body() body: TestimonialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      testimonials: {
        set: body,
      },
    };
    await this.service.updatePortfolio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/testimonials")
  async disconnectTestimonials(
    @common.Param() params: PortfolioWhereUniqueInput,
    @common.Body() body: TestimonialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      testimonials: {
        disconnect: body,
      },
    };
    await this.service.updatePortfolio({
      where: params,
      data,
      select: { id: true },
    });
  }
}
