/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VitalSignsService } from "../vitalSigns.service";
import { VitalSignsCreateInput } from "./VitalSignsCreateInput";
import { VitalSigns } from "./VitalSigns";
import { VitalSignsFindManyArgs } from "./VitalSignsFindManyArgs";
import { VitalSignsWhereUniqueInput } from "./VitalSignsWhereUniqueInput";
import { VitalSignsUpdateInput } from "./VitalSignsUpdateInput";

export class VitalSignsControllerBase {
  constructor(protected readonly service: VitalSignsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VitalSigns })
  async createVitalSigns(
    @common.Body() data: VitalSignsCreateInput
  ): Promise<VitalSigns> {
    return await this.service.createVitalSigns({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        bloodPressure: true,
        createdAt: true,
        heartAge: true,
        heartRate: true,
        heartRateVariability: true,
        id: true,
        respirationRate: true,
        spO2: true,
        timestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VitalSigns] })
  @ApiNestedQuery(VitalSignsFindManyArgs)
  async vitalSignsItems(@common.Req() request: Request): Promise<VitalSigns[]> {
    const args = plainToClass(VitalSignsFindManyArgs, request.query);
    return this.service.vitalSignsItems({
      ...args,
      select: {
        bloodPressure: true,
        createdAt: true,
        heartAge: true,
        heartRate: true,
        heartRateVariability: true,
        id: true,
        respirationRate: true,
        spO2: true,
        timestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VitalSigns })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async vitalSigns(
    @common.Param() params: VitalSignsWhereUniqueInput
  ): Promise<VitalSigns | null> {
    const result = await this.service.vitalSigns({
      where: params,
      select: {
        bloodPressure: true,
        createdAt: true,
        heartAge: true,
        heartRate: true,
        heartRateVariability: true,
        id: true,
        respirationRate: true,
        spO2: true,
        timestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VitalSigns })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVitalSigns(
    @common.Param() params: VitalSignsWhereUniqueInput,
    @common.Body() data: VitalSignsUpdateInput
  ): Promise<VitalSigns | null> {
    try {
      return await this.service.updateVitalSigns({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          bloodPressure: true,
          createdAt: true,
          heartAge: true,
          heartRate: true,
          heartRateVariability: true,
          id: true,
          respirationRate: true,
          spO2: true,
          timestamp: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VitalSigns })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVitalSigns(
    @common.Param() params: VitalSignsWhereUniqueInput
  ): Promise<VitalSigns | null> {
    try {
      return await this.service.deleteVitalSigns({
        where: params,
        select: {
          bloodPressure: true,
          createdAt: true,
          heartAge: true,
          heartRate: true,
          heartRateVariability: true,
          id: true,
          respirationRate: true,
          spO2: true,
          timestamp: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
