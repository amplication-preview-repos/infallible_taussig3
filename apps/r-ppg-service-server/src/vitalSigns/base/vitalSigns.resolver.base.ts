/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VitalSigns } from "./VitalSigns";
import { VitalSignsCountArgs } from "./VitalSignsCountArgs";
import { VitalSignsFindManyArgs } from "./VitalSignsFindManyArgs";
import { VitalSignsFindUniqueArgs } from "./VitalSignsFindUniqueArgs";
import { CreateVitalSignsArgs } from "./CreateVitalSignsArgs";
import { UpdateVitalSignsArgs } from "./UpdateVitalSignsArgs";
import { DeleteVitalSignsArgs } from "./DeleteVitalSignsArgs";
import { User } from "../../user/base/User";
import { VitalSignsService } from "../vitalSigns.service";
@graphql.Resolver(() => VitalSigns)
export class VitalSignsResolverBase {
  constructor(protected readonly service: VitalSignsService) {}

  async _vitalSignsItemsMeta(
    @graphql.Args() args: VitalSignsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VitalSigns])
  async vitalSignsItems(
    @graphql.Args() args: VitalSignsFindManyArgs
  ): Promise<VitalSigns[]> {
    return this.service.vitalSignsItems(args);
  }

  @graphql.Query(() => VitalSigns, { nullable: true })
  async vitalSigns(
    @graphql.Args() args: VitalSignsFindUniqueArgs
  ): Promise<VitalSigns | null> {
    const result = await this.service.vitalSigns(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VitalSigns)
  async createVitalSigns(
    @graphql.Args() args: CreateVitalSignsArgs
  ): Promise<VitalSigns> {
    return await this.service.createVitalSigns({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => VitalSigns)
  async updateVitalSigns(
    @graphql.Args() args: UpdateVitalSignsArgs
  ): Promise<VitalSigns | null> {
    try {
      return await this.service.updateVitalSigns({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VitalSigns)
  async deleteVitalSigns(
    @graphql.Args() args: DeleteVitalSignsArgs
  ): Promise<VitalSigns | null> {
    try {
      return await this.service.deleteVitalSigns(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: VitalSigns): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
