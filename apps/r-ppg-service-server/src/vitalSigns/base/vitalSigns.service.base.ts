/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  VitalSigns as PrismaVitalSigns,
  User as PrismaUser,
} from "@prisma/client";

export class VitalSignsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VitalSignsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.vitalSigns.count(args);
  }

  async vitalSignsItems(
    args: Prisma.VitalSignsFindManyArgs
  ): Promise<PrismaVitalSigns[]> {
    return this.prisma.vitalSigns.findMany(args);
  }
  async vitalSigns(
    args: Prisma.VitalSignsFindUniqueArgs
  ): Promise<PrismaVitalSigns | null> {
    return this.prisma.vitalSigns.findUnique(args);
  }
  async createVitalSigns(
    args: Prisma.VitalSignsCreateArgs
  ): Promise<PrismaVitalSigns> {
    return this.prisma.vitalSigns.create(args);
  }
  async updateVitalSigns(
    args: Prisma.VitalSignsUpdateArgs
  ): Promise<PrismaVitalSigns> {
    return this.prisma.vitalSigns.update(args);
  }
  async deleteVitalSigns(
    args: Prisma.VitalSignsDeleteArgs
  ): Promise<PrismaVitalSigns> {
    return this.prisma.vitalSigns.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.vitalSigns
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
